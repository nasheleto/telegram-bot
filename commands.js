const {gameOptions} = require('./options')
const {shuffle} = require('./utils')
const {createUser, getUserById, updateUser, getUserByNickname} = require('./storage')
const chats = require('./chats')

const command = (meta, command) => {
    return {
        meta, command
    }
}

const start = command(
    {
        description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
        pattern: /^\/?(start|—Å—Ç–∞—Ä—Ç)$/,
    }, async (bot, msg) => {
    let user = await getUserById(msg.from.id)
    if (user === null) {
        await createUser({
            id: msg.from.id,
            nickname: msg.from.username ?? msg.from.first_name,
            firstName: msg.from.first_name,
            lastName: msg.from.last_name ?? null,
            balance: 500,
            registeredAt: Date.now(),
        })
        user = await getUserById(msg.from.id)
    } 
    
    await bot.sendSticker(msg.chat.id, 'https://chpic.su/_data/stickers/h/hdjajs78_h/hdjajs78_h_002.webp?v=1712145304')
    await bot.sendMessage(msg.chat.id, `–ü—Ä–∏–≤–µ—Ç, ${user.nickname}. –¢–≤–æ–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: $${user.balance}`)
    await bot.sendMessage(msg.chat.id, `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: 
    /start ‚Äî –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    /info ‚Äî –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /game ‚Äî –ò–≥—Ä–∞
    /nickname ‚ñ∫–≤–∞—à –Ω–∏–∫‚óÑ ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫
    /casino ‚ñ∫—Å—Ç–∞–≤–∫–∞‚óÑ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–∫–∞–∑–∏–Ω–æ 100") ‚Äî –ö–∞–∑–∏–Ω–æ
    /bonus ‚Äî –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å (–¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)
    /pension - –ó–∞–±—Ä–∞—Ç—å –ø–µ–Ω—Å–∏—é  (–¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é)`)
})

const info = command(
    {
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',  
    pattern: /^\/?(info|–∏–Ω—Ñ–æ)$/
    }, 
    
    async (bot, msg) => {
        let user = await getUserById(msg.from.id)
        let text = `
        –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
        –ò–º—è: ${user.firstName}
        –§–∞–º–∏–ª–∏—è: ${user.lastName ?? `–ù–µ—Ç`}
        –ù–∏–∫–Ω–µ–π–º: ${user.nickname}
        –ë–∞–ª–∞–Ω—Å: $${user.balance}
        –î–Ω–µ–π —Å–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${Math.floor((Date.now() - user.registeredAt) / 1000 / 60 / 60 / 24)}
        `
        await bot.sendMessage(msg.chat.id, text)
})

const balance = command({
    description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å',  
    pattern: /^\/?(balance|–±–∞–ª–∞–Ω—Å)$/
},
async (bot, msg) => {
    const user = await getUserById(msg.from.id)
    await bot.sendMessage(msg.chat.id, `–í–∞—à –±–∞–ª–∞–Ω—Å $${user.balance}`)
})

const game = command({
    description: '–ò–≥—Ä–∞',  
    pattern: /^\/?(game|–∏–≥—Ä–∞|play)$/
    }, async (bot, msg) => {
    await bot.sendMessage(msg.chat.id, '–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ—ë —É–≥–∞–¥–∞—Ç—å')
    const randomNumber = Math.floor(Math.random() * 10)
    chats[msg.chat.id] = randomNumber
    await bot.sendMessage(msg.chat.id, '–û—Ç–≥–∞–¥—ã–≤–∞–π', gameOptions)
})

const nickname = command({
    description: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º',  
    pattern: /^\/?(nick|nickname|–Ω–∏–∫|–Ω–∏–∫–Ω–µ–π–º)\s?.*$/,
    displayInMenu: true,
    }, async (bot, msg, args) => {
    const nickname = args.join(' ')

    if (!nickname) {
        return await bot.sendMessage(msg.chat.id, `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–∫–æ–π –Ω–∏–∫–Ω–µ–π–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /nickname <–≤–∞—à –Ω–∏–∫>`)
    }

    if (nickname.length > 16) {
        return await bot.sendMessage(msg.chat.id, `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ 16 —Å–∏–º–≤–æ–ª–æ–≤.`)
    }

    if (/^[\w\s–∞-—è]+$/i.test(nickname) === false) {
        return await bot.sendMessage(msg.chat.id, `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ`)
    }
    
    const user = await getUserByNickname(nickname)
    if (user === null) {
        const success = await updateUser(msg.from.id, {nickname})
        if (success) {
            await bot.sendMessage(msg.chat.id, `–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –Ω–∞ ${nickname}`)
        } else {
            await bot.sendMessage(msg.chat.id, `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º`)
        }
    } else {
        if (user.id === msg.from.id) {
            await bot.sendMessage(msg.chat.id, `–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º`)
        } else {
            await bot.sendMessage(msg.chat.id, `–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω`)
        }
    }
})

const casino = command({
    description: '–ö–∞–∑–∏–Ω–æ', 
    pattern: /^\/?(–∫–∞–∑–∏–Ω–æ|casino)\s?.*$/,
    displayInMenu: false,
}, async (bot, msg, args) => {
    const user = await getUserById(msg.from.id)
    if (user === null) {
        return bot.sendMessage(msg.chat.id, '–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø–∏—à–∏—Ç–µ /start')
    }

    const multipliers = [0, 0.5, 0, 0, 2, 5, 1, 1.5, 0.75, 0, 0.25, 10, 2, 100, 2, 5, 1, 0.7, 1, 0.9, 0.52]

    const bet = Number(args[0])

    if (Number.isNaN(bet)){
        return bot.sendMessage(msg.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /casino –∏–ª–∏ /–∫–∞–∑–∏–Ω–æ –∏–ª–∏ –∫–∞–∑–∏–Ω–æ <—Å—Ç–∞–≤–∫–∞>')
    }

    if (bet > user.balance) {
        return bot.sendMessage(msg.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
    }

    if (bet < 10) {
        return bot.sendMessage(msg.chat.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: $10")
    }

    for (let i = bet; i > 1; i = i / 1000) {
        multipliers.push(0)
        multipliers.push(0)
    }

    shuffle(multipliers)

    const random = Date.now() % multipliers.length
    const multiplier = multipliers[random]

    const result = multiplier * bet

    const update = {
        balance: user.balance - bet + result,
    }

    await updateUser(msg.from.id, update)

    bot.sendMessage(msg.chat.id, `–í–∞–º –≤—ã–ø–∞–ª X${multiplier}. –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç $${update.balance}`)
})

const formatTime = (time) => {
    const hours = Math.floor((time / (1000 * 60 * 60)) % 24)
    const minutes = Math.floor((time / (1000 * 60)) % 60)
    const seconds = Math.floor((time / 1000) % 60)

    return `${hours} —á. ${minutes} –º–∏–Ω. ${seconds} —Å–µ–∫.`
}

const bonus = command({
    description: '–ë–æ–Ω—É—Å', 
    pattern: /^\/?(bonus|–±–æ–Ω—É—Å)\s?.*$/,
}, async (bot, msg) => {
    const user = await getUserById(msg.from.id)
    const day = 1000 * 60 * 60 * 24 
    const time = Date.now() - (user.lastBonusAt ?? 0)
    if (time < day) {
        return bot.sendMessage(msg.from.id, `–ë–æ–Ω—É—Å –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –µ–≥–æ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ ${formatTime(day - time)}`)
    }
    const bonus = 1500
    const update = {
        balance: user.balance + bonus,
        lastBonusAt: Date.now()
    }
    await updateUser(msg.from.id, update)
    bot.sendMessage(msg.from.id, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ë–æ–Ω—É—Å $1500 —Å–æ–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç $${update.balance}`)
})


const formatTimeWeek = (time) => {
    const day = Math.floor((time / (1000 * 60 * 60 * 24)) % 7)
    const hours = Math.floor((time / (1000 * 60 * 60)) % 24)
    const minutes = Math.floor((time / (1000 * 60)) % 60)
    const seconds = Math.floor((time / 1000) % 60)

    return `${day} –¥–Ω. ${hours} —á. ${minutes} –º–∏–Ω. ${seconds} —Å–µ–∫.`
}

const pension = command({
    description: '–ü–µ–Ω—Å–∏—è', 
    pattern: /^\/?(pension|–ø–µ–Ω—Å–∏—è)\s?.*$/,
}, async (bot, msg) => {
    const user = await getUserById(msg.from.id)
    const week = 1000 * 60 * 60 * 24 * 7
    const time = Date.now() - (user.lastPensionAt ?? 0)

    if (time < week) {
        return bot.sendMessage(msg.from.id, `–ü–µ–Ω—Å–∏—è –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –µ—ë –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ ${formatTimeWeek(week - time)} `)
    }
    const x = Math.floor((Date.now() - user.registeredAt) / 1000 / 60 / 60 / 24 / 7 / 4)

    const update = {
        balance: user.balance + 500 * (x+1),
        lastPensionAt: Date.now()
    }

    await updateUser(msg.from.id, update)
    bot.sendMessage(msg.from.id, `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü–µ–Ω—Å–∏—è $${500 * (x+1)} —Å–æ–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç $${update.balance}`)
})

const home = command({
    description: '–î–æ–º', 
    pattern: /^\/?(home|–¥–æ–º)\s?.*$/,
}, async (bot, msg) => {
    let user = await getUserById(msg.from.id)
        let text = `
        ${Date.now() - (user.lastBonusAt ?? 0) > (1000 * 60 * 60 * 24) ? 'üü¢': 'üî¥'} –ë–æ–Ω—É—Å /bonus
${Date.now() - (user.lastPensionAt ?? 0) > (1000 * 60 * 60 * 24 * 7) ? 'üü¢': 'üî¥'} –ü–µ–Ω—Å–∏—è /pension
        `
        await bot.sendMessage(msg.chat.id, text)
})


// const home = command({
//     description: '–î–æ–º', 
//     pattern: /^\/?(home|–¥–æ–º)\s?.*$/,
// }, async (bot, msg) => {
    
// })

module.exports = {
    start,
    info, 
    game,
    nickname,
    casino,
    bonus,
    balance,
    pension,
    home,
}